using System;
using System.Collections.Generic;
using Tactile.GardenGame.MapSystem;
using UnityEngine;

namespace Tactile.GardenGame
{
	[SingletonAssetPath("Assets/[GardenGame]/Resources/GardenGameSetup.asset")]
	public class GardenGameSetup : SingletonAsset<GardenGameSetup>
	{
		public string MainBootScene
		{
			get
			{
				return this.mainBootScene;
			}
		}

		public IEnumerable<GameObject> IterateAreaPrefabs(bool alwaysUseWorkingAreas = false, bool includeDefaultObjects = true)
		{
			if (includeDefaultObjects)
			{
				yield return this.defaultObjectsPrefab;
			}
			GameObject[] prefabs = Resources.LoadAll<GameObject>("Areas/");
			for (int i = 0; i < prefabs.Length; i++)
			{
				yield return prefabs[i];
			}
			yield break;
		}

		public IEnumerable<T> IterateAreaObjectsWithComponent<T>() where T : Component
		{
			foreach (GameObject areaPrefab in this.IterateAreaPrefabs(true, true))
			{
				T[] components = areaPrefab.GetComponentsInChildren<T>(true);
				for (int i = 0; i < components.Length; i++)
				{
					yield return components[i];
				}
			}
			yield break;
		}

		public static GardenGameSetup Get
		{
			get
			{
				return SingletonAsset<GardenGameSetup>.Instance;
			}
		}

		public const string AreasResourcePath = "Assets/Autogenerated/Map/Resources/Areas";

		[SerializeField]
		public string mainBootScene;

		[SerializeField]
		public UnityEngine.Object dialogCharacterFolder;

		[SerializeField]
		public UnityEngine.Object dialogImagesFolder;

		[SerializeField]
		public UnityEngine.Object dialogSplitImagesFolder;

		[SerializeField]
		public UnityEngine.Object dialogVariantsFolder;

		[SerializeField]
		public UnityEngine.Object mapImagesFolder;

		[SerializeField]
		public UnityEngine.Object photographsFolder;

		[SerializeField]
		public UnityEngine.Object mapImagesIconFolder;

		[SerializeField]
		public UnityEngine.Object variationPropsIconFolder;

		[SerializeField]
		public UnityEngine.Object mapTilesFolder;

		[SerializeField]
		public AnimationCurve propJumpCurve;

		[SerializeField]
		public float propJumpHeight = 10f;

		[SerializeField]
		public float propSquashing = 0.3f;

		[SerializeField]
		public AnimationCurve propSelectCurve;

		[SerializeField]
		public float propSelectSquashAmount = 0.3f;

		[SerializeField]
		public AnimationCurve mapImageFadeAnimationCurve;

		[SerializeField]
		public float mapImageFadeAnimationCurveDuration = 1f;

		[SerializeField]
		public MapTransformSelectionBounceAnimation.Config selectionBounceAnimation;

		[SerializeField]
		public float camMinOrthoSize = 150f;

		[SerializeField]
		public float camDefaultOrthoSize = 250f;

		[SerializeField]
		public float camMaxOrthoSize = 350f;

		[SerializeField]
		public AnimationCurve camZoomCurve;

		[SerializeField]
		public float camZoomDuration = 1f;

		[SerializeField]
		public Vector2 camLimits = Vector2.zero;

		[SerializeField]
		public float camRadiusFollowSpeed = 2f;

		[SerializeField]
		public float camRadiusFollowRadius = 150f;

		[SerializeField]
		public AnimationCurve followCurve;

		[SerializeField]
		public float followDuration = 1f;

		[SerializeField]
		public GameObject defaultObjectsPrefab;

		[SerializeField]
		public string chaptersPath;

		[SerializeField]
		public string areaPrefabsPath;

		[SerializeField]
		public RenderTexture lightingRenderTexture;

		[SerializeField]
		public int lightingLayer;

		[SerializeField]
		public Color nightColor;

		[SerializeField]
		public Color nightColorR = Color.red;

		[SerializeField]
		public Color nightColorG = Color.green;

		[SerializeField]
		public Color nightColorB = Color.blue;

		[SerializeField]
		public RenderTexture heightMapRenderTexture;

		[SerializeField]
		public Material lightMaterial;

		[SerializeField]
		public Material lightMaskMaterial;

		[SerializeField]
		public Material tileMaterial;

		[SerializeField]
		public Material characterMaterial;

		[SerializeField]
		public Material propMaterial;

		[SerializeField]
		public Material propTintedMaterial;

		[SerializeField]
		public Material coverageMaterial;

		[SerializeField]
		public Material coverageMaterial_editor;

		[SerializeField]
		public Material revealEffectMaterial;

		[SerializeField]
		public Shader mapTileEditorShader;

		[SerializeField]
		public Shader propHeightMapShader;

		[SerializeField]
		public SoundDefinition music;

		[SerializeField]
		public PathFindingSetUp pathFindingSetUp;

		[SerializeField]
		public MapAtlasSettings mapAtlasSettings;
	}
}
