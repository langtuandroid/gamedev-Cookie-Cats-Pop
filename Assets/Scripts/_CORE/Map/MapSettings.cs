using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using UnityEngine;

public class MapSettings : ScriptableObject
{
	public static string GetAssetName(MapIdentifier mapIdentifier)
	{
		return mapIdentifier + "mapsettings";
	}

	public MapViewSetup MapViewSetup
	{
		get
		{
			return this.mapSetupAsset;
		}
		private set
		{
			this.mapSetupAsset = value;
		}
	}

	private bool IsImageWithinRange(string image, int startIndex, int endIndex)
	{
		if (!this.hasSideTiles && MapAssetBundleManager.GetMapImageQuadrant(image) != MapQuadrant.Center)
		{
			return false;
		}
		Regex regex = new Regex(this.imageFileBaseName + "_(\\d+).*");
		Match match = regex.Match(image);
		if (match.Success)
		{
			int num = Convert.ToInt32(match.Groups[1].Value);
			if ((this.startAtMapIndex == -1 || num >= startIndex) && (this.endAtMapIndex == -1 || num <= endIndex))
			{
				return true;
			}
		}
		return false;
	}

	public List<string> TrimImageListWithinRange(List<string> images)
	{
		List<string> list = new List<string>();
		foreach (string text in images)
		{
			if (this.IsImageWithinRange(text, this.startAtMapIndex, this.endAtMapIndex))
			{
				list.Add(text);
			}
		}
		return list;
	}

	public List<Texture2D> TrimImageTextureListWithinRange(List<Texture2D> imagesTextures, int startIndex, int endIndex)
	{
		List<Texture2D> list = new List<Texture2D>();
		foreach (Texture2D texture2D in imagesTextures)
		{
			if (this.IsImageWithinRange(texture2D.name, startIndex, endIndex))
			{
				list.Add(texture2D);
			}
		}
		return list;
	}

	[Tooltip("The identifier used to link the map editing scene, the map settings, and the map streamer runtime system together")]
	public MapIdentifier identifier;

	private const string MAP_SETTINGS_POST_ASSETNAME = "mapsettings";

	[Space]
	[Tooltip("The scene used to edit this map.")]
	[HideInInspector]
	public string editingSceneName = "Assets/Scenes/MapEditing.unity";

	[HideInInspector]
	[Tooltip("The source folder for map segments for this map.")]
	public string mapTileSourceFolder = "Assets/MapSegments/";

	[HideInInspector]
	[Tooltip("The folder where auto generated mapsegments are automatically put.")]
	public string autogeneratedImageFolder = "Assets/Resources/MapSegments/ImagesAutoGenerated/";

	[Tooltip("The path where the stripped map prefab is saved to.")]
	public string autogeneratedMapPrefabPath = "Assets/[MapSettings]/AutoGenerated/Resources/MapViewAutoGenerated.prefab";

	[Tooltip("The base of the names for the map segment texture files.")]
	public string imageFileBaseName = "worldmap";

	[Header("Dynamic End Piece Placement - only needed for maps with a Max Available Level concept")]
	public string endPiecePrefabPath;

	public float endPieceVisibleHeight;

	[Space]
	[Tooltip("No tooltip available!")]
	public bool allowUpdatingOfResourceMapSegments;

	[Tooltip("Does this map use side tiles? Enabling this will generate 4 smaller side segments per big map segment (2 on each side). This means better support for landscape mode.")]
	public bool hasSideTiles;

	[Tooltip("This will allow the map to auto generate map segment objects runtime, instead of using only the predefined map objects. This would allow for a theme update to be made entierly through the level database bundle.")]
	public bool autogenerateMapsegments;

	[Tooltip("The map will skip x amount of map segments and start higher. Leave at -1 to go the full map height. This is usefull for maps like the Social Challenge map.")]
	public int startAtMapIndex;

	[Tooltip("The map will stop at this map segment. This is usefull for maps like the Social Challenge map.")]
	public int endAtMapIndex = -1;

	[Space]
	[Tooltip("Mark as the default map. Only one map can have this enabled. This is the map that will be used by the World Map menu.")]
	public bool isDefaultMap;

	[Header("Hard Levels")]
	[Space]
	[Tooltip("Whether Normal levels should be validated for correct Hard Parameters")]
	public bool validateHardLevelData;

	[Tooltip("The index from which Normal difficulty levels will start to be validated for Hard Parameters")]
	public int startIndexForHardLevelDataValidation;

	[HideInInspector]
	public int numBigMapTilesInBuild;

	[Tooltip("The index from which low res segments should start to be included in an assetbundle")]
	[HideInInspector]
	public int optionalSmallSegmentsStartIndex = -1;

	[SerializeField]
	[HideInInspector]
	private MapViewSetup mapSetupAsset;

	public const string MAP_SETTINGS_AUTOGEN_FOLDER = "Assets/[MapSettings]/AutoGenerated/Resources/";

	public const string MAP_SETTINGS_ROOT = "Assets/[MapSettings]";

	public const string MAP_SETTINGS_FOLDER = "Assets/[MapSettings]/Resources/";

	[HideInInspector]
	[NonSerialized]
	public int mapSegmentCopyFrom = -1;

	[HideInInspector]
	[NonSerialized]
	public int mapSegmentCopyTo = -1;
}
