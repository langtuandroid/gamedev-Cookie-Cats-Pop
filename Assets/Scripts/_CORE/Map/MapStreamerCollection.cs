using System;
using System.Collections.Generic;
using System.Diagnostics;
using TactileModules.RuntimeTools;
using TactileModules.TactileCloud.AssetBundles;
using UnityEngine;

public class MapStreamerCollection : SingleInstance<MapStreamerCollection>, AssetBundleManager.IManagedAssetBundleHandler
{
	public MapStreamerCollection(AssetBundleManager assetBundleManager, TactileAnalytics tactileAnalytics)
	{
		this.assetBundleManager = assetBundleManager;
		this.tactileAnalytics = tactileAnalytics;
		this.CacheAllMetaData();
		this.RegisterLevelDatabaseListener("Main");
	}

	protected void CacheAllMetaData()
	{
		MapSettings[] array = Resources.LoadAll<MapSettings>("MapSettings/");
		foreach (MapSettings mapSettings in array)
		{
			this.cachedResourceMapSettings[mapSettings.identifier] = mapSettings;
		}
	}

	public MapViewSetup GetMapViewSetupFromMapIdentifier(MapIdentifier mapIdentifier)
	{
		if (this.themeAssetBundles.ContainsKey(mapIdentifier))
		{
			KeyValuePair<MapIdentifier, AssetBundle> keyValuePair = this.themeAssetBundles[mapIdentifier];
			MapIdentifier key = keyValuePair.Key;
			AssetBundle value = keyValuePair.Value;
			MapViewSetup mapViewSetup = value.LoadAsset<MapViewSetup>(key + "MapViewSetup");
			mapViewSetup.AssetBundle = value;
			return mapViewSetup;
		}
		string text = mapIdentifier + "MapViewSetup";
		if (this.managedLevelDatabaseBundles.ContainsKey(mapIdentifier))
		{
			ManagedAssetbundle managedAssetbundle = this.managedLevelDatabaseBundles[mapIdentifier];
			if (managedAssetbundle.CurrentState == ManagedAssetbundle.State.CONSUMED && managedAssetbundle.AssetBundle != null)
			{
				MapViewSetup mapViewSetup2 = managedAssetbundle.AssetBundle.LoadAsset<MapViewSetup>(text);
				mapViewSetup2.AssetBundle = managedAssetbundle.AssetBundle;
				return mapViewSetup2;
			}
		}
		string text2 = "Assets/[MapSettings]/AutoGenerated/Resources/";
		string str = text2.Substring(text2.IndexOf("Resources/") + 10);
		return Resources.Load<MapViewSetup>(str + text);
	}

	public MapSettings GetMapSettingsFromMapIdentifier(MapIdentifier mapIdentifier)
	{
		if (this.themeAssetBundles.ContainsKey(mapIdentifier))
		{
			KeyValuePair<MapIdentifier, AssetBundle> keyValuePair = this.themeAssetBundles[mapIdentifier];
			MapIdentifier key = keyValuePair.Key;
			AssetBundle value = keyValuePair.Value;
			string assetName = MapSettings.GetAssetName(key);
			return value.LoadAsset<MapSettings>(assetName);
		}
		if (this.cachedBundledMapSettings.ContainsKey(mapIdentifier))
		{
			return this.cachedBundledMapSettings[mapIdentifier];
		}
		if (this.managedLevelDatabaseBundles.ContainsKey(mapIdentifier))
		{
			ManagedAssetbundle managedAssetbundle = this.managedLevelDatabaseBundles[mapIdentifier];
			if (managedAssetbundle.CurrentState == ManagedAssetbundle.State.CONSUMED && managedAssetbundle.AssetBundle != null)
			{
				string assetName2 = MapSettings.GetAssetName(mapIdentifier);
				MapSettings mapSettings = managedAssetbundle.AssetBundle.LoadAsset<MapSettings>(assetName2);
				if (mapSettings != null)
				{
					this.cachedBundledMapSettings.Add(mapIdentifier, mapSettings);
					return mapSettings;
				}
				string errorName = "[MapStreamerCollection] Cant find Map Settings in asset bundle";
				StackTrace stackTrace = new StackTrace();
				this.tactileAnalytics.LogEvent(new ClientErrorEvent(errorName, stackTrace.ToString(), null, assetName2, null, null, null, null, null), -1.0, null);
			}
		}
		foreach (MapSettings mapSettings2 in this.cachedResourceMapSettings.Values)
		{
			if (mapSettings2.identifier == mapIdentifier)
			{
				return mapSettings2;
			}
		}
		return null;
	}

	public MapRuntimeRoot GetMapRuntimeRoot(MapIdentifier mapIdentifier)
	{
		string autogeneratedMapPrefabPath = this.cachedResourceMapSettings[mapIdentifier].autogeneratedMapPrefabPath;
		string path = AssetPathUtility.AssetPathToResourcePath(autogeneratedMapPrefabPath);
		return Resources.Load<MapRuntimeRoot>(path);
	}

	public void RegisterLevelDatabaseListener(string pMapAndLevelsIdentifier)
	{
		if (!this.managedLevelDatabaseBundles.ContainsKey(pMapAndLevelsIdentifier))
		{
			ManagedAssetbundle value = this.assetBundleManager.RegisterManagedAssetBundleHandler(pMapAndLevelsIdentifier, this);
			this.managedLevelDatabaseBundles.Add(pMapAndLevelsIdentifier, value);
		}
	}

	public void AddThemeAssetBundle(MapIdentifier mapIdentifier, MapIdentifier themeMapIdentifier, AssetBundle assetBundle)
	{
		if (!this.themeAssetBundles.ContainsKey(mapIdentifier))
		{
			KeyValuePair<MapIdentifier, AssetBundle> value = new KeyValuePair<MapIdentifier, AssetBundle>(themeMapIdentifier, assetBundle);
			this.themeAssetBundles.Add(mapIdentifier, value);
		}
	}

	public void RemoveThemeAssetBundle(MapIdentifier mapIdentifier)
	{
		if (this.themeAssetBundles.ContainsKey(mapIdentifier))
		{
			this.themeAssetBundles.Remove(mapIdentifier);
		}
	}

	public void UpdateLevelDatabasesIfAvailable()
	{
		foreach (KeyValuePair<string, ManagedAssetbundle> keyValuePair in this.managedLevelDatabaseBundles)
		{
			this.ConsumeLevelDatabaseBundleIfAvailable(keyValuePair.Key);
		}
	}

	public void ConsumeLevelDatabaseBundleIfAvailable(string pMapIdentifier)
	{
		if (this.managedLevelDatabaseBundles.ContainsKey(pMapIdentifier))
		{
			ManagedAssetbundle managedAssetbundle = this.managedLevelDatabaseBundles[pMapIdentifier];
			if (managedAssetbundle.CurrentState == ManagedAssetbundle.State.AWAITING_CONSUMPTION)
			{
				managedAssetbundle.ConsumeChanges(false);
			}
			else if (managedAssetbundle.CurrentState == ManagedAssetbundle.State.UNAVAILABLE && this.cachedBundledMapSettings.ContainsKey(managedAssetbundle.AssetBundleName))
			{
				this.cachedBundledMapSettings.Remove(managedAssetbundle.AssetBundleName);
			}
		}
	}

	public void OnStateChanged(ManagedAssetbundle managedAssetbundle, ManagedAssetbundle.State newState)
	{
		if (newState == ManagedAssetbundle.State.AWAITING_CONSUMPTION)
		{
		}
	}

	private Dictionary<string, MapSettings> cachedResourceMapSettings = new Dictionary<string, MapSettings>();

	private Dictionary<string, MapSettings> cachedBundledMapSettings = new Dictionary<string, MapSettings>();

	private Dictionary<string, ManagedAssetbundle> managedLevelDatabaseBundles = new Dictionary<string, ManagedAssetbundle>();

	private Dictionary<MapIdentifier, KeyValuePair<MapIdentifier, AssetBundle>> themeAssetBundles = new Dictionary<MapIdentifier, KeyValuePair<MapIdentifier, AssetBundle>>();

	public const string META_ASSET_FOLDER = "Assets/[MapSettings]/AutoGenerated/Resources/";

	private AssetBundleManager assetBundleManager;

	private TactileAnalytics tactileAnalytics;
}
